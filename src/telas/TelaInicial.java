package telas;

import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JOptionPane;

import javax.swing.table.DefaultTableModel;
import utilitarios.Validacoes;

public class TelaInicial extends javax.swing.JFrame {

    private final String[] tableColumns = {"Data", "Hora", "Pressão sistólica", "Pressão distólica", "Está em estresse"};
    DefaultTableModel model = new DefaultTableModel(tableColumns, 0);
    List<List<String>> dados = new ArrayList<>();
    String localDoarquivo = "C:\\atividade4\\atv4.csv";

    /**
     * Creates new form TelaInicial
     */
    public TelaInicial() {
        criarPasta();
        initComponents();
        abrirArquivo();
    }

    public void criarPasta() {

        String caminhoPasta = "C:\\atividade4";
        String caminhoArquivo = caminhoPasta + "\\atv4.csv";

        File pasta = new File(caminhoPasta);
        File arquivo = new File(caminhoArquivo);
        if (!pasta.exists()) {
            pasta.mkdir();
        }
        if (!arquivo.exists()) {
            try {
                arquivo.createNewFile();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(rootPane, "erro." + e.getMessage());
            }
        }
    }

    public String validarBotão() {
        String estadoAtual = "Não";
        if (cbEstresse.isSelected()) {
            estadoAtual = "Sim";
        }
        return estadoAtual;
    }

    public void limparCampos() {
        textData.setText("");
        textHora.setText("");
        textSistolica.setText("");
        textDiastolica.setText("");
        cbEstresse.setSelected(false);
    }

    public void abrirArquivo() {
        try (BufferedReader br = new BufferedReader(new FileReader(localDoarquivo))) {

            String linha = br.readLine();

            DefaultTableModel model = new DefaultTableModel(tableColumns, 0);

            while (linha != null) {
                List<String> lineData = Arrays.asList((linha.split(";")));
                model.addRow(lineData.toArray());
                linha = br.readLine();
            }

            tblRegistros.setModel(model);

        } catch (IOException e) {
            JOptionPane.showMessageDialog(rootPane, "erro." + e.getMessage());
        }

    }

    public void salvarArquivo() throws IOException {

        FileWriter localArquivo = new FileWriter(localDoarquivo, true);
        dados = Arrays.asList(
                Arrays.asList(textData.getText(), textHora.getText(), textSistolica.getText(), textDiastolica.getText(), validarBotão()));

        
        for (List<String> rowData : dados) {
            localArquivo.append(String.join(";", rowData));
            localArquivo.append("\n");
        }
        localArquivo.flush();
        localArquivo.close();

        abrirArquivo();
        limparCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRegistros = new javax.swing.JTable();
        lblData = new javax.swing.JLabel();
        textData = new javax.swing.JTextField();
        lblHora = new javax.swing.JLabel();
        textHora = new javax.swing.JTextField();
        lblSistolica = new javax.swing.JLabel();
        textSistolica = new javax.swing.JTextField();
        lblDiastolica = new javax.swing.JLabel();
        textDiastolica = new javax.swing.JTextField();
        cbEstresse = new javax.swing.JCheckBox();
        btnSalvar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        barraDeMenu = new javax.swing.JMenuBar();
        menu = new javax.swing.JMenu();
        ajuda = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setToolTipText("informe os dados para registrar a sua pressão");

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setOpaque(false);

        tblRegistros.setBackground(new java.awt.Color(255, 255, 255));
        tblRegistros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data", "Hora", "Pressão sistólica", "Tpressão diastólica", "Estresse"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblRegistros.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tblRegistrosAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane1.setViewportView(tblRegistros);

        lblData.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblData.setForeground(new java.awt.Color(0, 0, 0));
        lblData.setText("Data:");
        lblData.setToolTipText("informe a data em que foi feito o registro da pressão");

        textData.setBackground(new java.awt.Color(255, 255, 255));
        textData.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        textData.setForeground(new java.awt.Color(0, 0, 0));
        textData.setToolTipText("informe a data em que foi feito o registro da pressão");
        textData.setNextFocusableComponent(textHora);

        lblHora.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblHora.setForeground(new java.awt.Color(0, 0, 0));
        lblHora.setText("Hora:");
        lblHora.setToolTipText("informe a hora em que foi feito o registro da pressão");

        textHora.setBackground(new java.awt.Color(255, 255, 255));
        textHora.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        textHora.setForeground(new java.awt.Color(0, 0, 0));
        textHora.setToolTipText("informe a hora em que foi feito o registro da pressão");
        textHora.setNextFocusableComponent(textSistolica);

        lblSistolica.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblSistolica.setForeground(new java.awt.Color(0, 0, 0));
        lblSistolica.setText("Pressão sistólica:");
        lblSistolica.setToolTipText("informe em numeros inteiros a sua pressão sistólica");

        textSistolica.setBackground(new java.awt.Color(255, 255, 255));
        textSistolica.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        textSistolica.setForeground(new java.awt.Color(0, 0, 0));
        textSistolica.setToolTipText("informe em numeros inteiros a sua pressão sistólica");
        textSistolica.setNextFocusableComponent(textDiastolica);

        lblDiastolica.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblDiastolica.setForeground(new java.awt.Color(0, 0, 0));
        lblDiastolica.setText("Pressão diastólica:");
        lblDiastolica.setToolTipText("informe em numeros inteiros a sua pressão diastólica");

        textDiastolica.setBackground(new java.awt.Color(255, 255, 255));
        textDiastolica.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        textDiastolica.setForeground(new java.awt.Color(0, 0, 0));
        textDiastolica.setToolTipText("informe em numeros inteiros a sua pressão diastólica");
        textDiastolica.setNextFocusableComponent(cbEstresse);

        cbEstresse.setBackground(new java.awt.Color(255, 255, 255));
        cbEstresse.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cbEstresse.setForeground(new java.awt.Color(0, 0, 0));
        cbEstresse.setText("Situação de estresse");
        cbEstresse.setToolTipText("informe se você está em um momento de estresse na hora da medição");
        cbEstresse.setNextFocusableComponent(btnSalvar);
        cbEstresse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbEstresseActionPerformed(evt);
            }
        });
        cbEstresse.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cbEstresseKeyPressed(evt);
            }
        });

        btnSalvar.setBackground(new java.awt.Color(255, 255, 255));
        btnSalvar.setForeground(new java.awt.Color(0, 0, 0));
        btnSalvar.setText("Salvar");
        btnSalvar.setToolTipText("salva o registro");
        btnSalvar.setNextFocusableComponent(textData);
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });
        btnSalvar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnSalvarKeyPressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Registro de pressão");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(textHora, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(textDiastolica, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblHora)
                                .addGap(140, 140, 140)
                                .addComponent(lblDiastolica))
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textData, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblData))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblSistolica)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(textSistolica, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                                        .addComponent(cbEstresse)))))
                        .addGap(10, 10, 10)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSistolica, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblData, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textData, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textSistolica, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbEstresse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHora, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDiastolica, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textHora, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textDiastolica, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        textData.getAccessibleContext().setAccessibleParent(textData);
        textHora.getAccessibleContext().setAccessibleParent(lblHora);
        textSistolica.getAccessibleContext().setAccessibleParent(lblSistolica);
        textDiastolica.getAccessibleContext().setAccessibleParent(lblDiastolica);

        menu.setText("Menu");

        ajuda.setText("Ajuda");
        ajuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajudaActionPerformed(evt);
            }
        });
        menu.add(ajuda);

        barraDeMenu.add(menu);

        setJMenuBar(barraDeMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbEstresseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbEstresseActionPerformed

    }//GEN-LAST:event_cbEstresseActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        try {
            if (textData.getText().isEmpty() || textHora.getText().isEmpty() || textSistolica.getText().isEmpty() || textDiastolica.getText().isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "Por favor preencha todos os campos de texto");
            }
            if (Validacoes.validarData(textData.getText()) == false) {
                throw new NumberFormatException("Data no formato invalido. ex: DD/MM/AAA");
            }

            if (Validacoes.validarHora(textHora.getText()) == false) {
                throw new NumberFormatException("Hora no formato invalido. ex: 17:50");
            }

            if (Validacoes.validarPsistolica(textSistolica.getText()) == false) {
                throw new NumberFormatException("Pressão sistólica no formato invalido. informe numeros inteiros entre 90 e 240");
            }

            if (Validacoes.validarPdiastolica(textDiastolica.getText()) == false) {
                throw new NumberFormatException("Pressão distólica no formato invalido. informe numeros inteiros entre 60 e 140");
            }

            salvarArquivo();
            abrirArquivo();
            limparCampos();
            JOptionPane.showMessageDialog(rootPane, "Dados salvos com secesso!!");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "erro." + e.getMessage());
        }
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void tblRegistrosAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tblRegistrosAncestorAdded

    }//GEN-LAST:event_tblRegistrosAncestorAdded

    private void btnSalvarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnSalvarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnSalvar.doClick();
        }
    }//GEN-LAST:event_btnSalvarKeyPressed

    private void cbEstresseKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbEstresseKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER)
            cbEstresse.doClick();
    }//GEN-LAST:event_cbEstresseKeyPressed

    private void ajudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajudaActionPerformed
        JOptionPane.showMessageDialog(rootPane, "Você pode navegar entre os campos utilizando a tecla TAB do seu teclado\ne pode marcar os campos de seleção e botões usando a tecla ENTER do seu teclado. ");
    }//GEN-LAST:event_ajudaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaInicial().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem ajuda;
    private javax.swing.JMenuBar barraDeMenu;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JCheckBox cbEstresse;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblData;
    private javax.swing.JLabel lblDiastolica;
    private javax.swing.JLabel lblHora;
    private javax.swing.JLabel lblSistolica;
    private javax.swing.JMenu menu;
    private javax.swing.JTable tblRegistros;
    private javax.swing.JTextField textData;
    private javax.swing.JTextField textDiastolica;
    private javax.swing.JTextField textHora;
    private javax.swing.JTextField textSistolica;
    // End of variables declaration//GEN-END:variables
}
